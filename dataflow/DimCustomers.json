{
	"name": "DimCustomers",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "Addresses",
						"type": "DatasetReference"
					},
					"name": "Addresses"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SynapsePool",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join"
				},
				{
					"name": "derivedColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CreatedDate as date,",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          PhoneNumber as long,",
				"          SourceID as boolean,",
				"          UniqueID as string,",
				"          UpdatedDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Customers",
				"source(output(",
				"          AddressID as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          CreatedDate as date,",
				"          CustomerID as string,",
				"          SourceID as boolean,",
				"          State as string,",
				"          UniqueID as string,",
				"          UpdatedDate as date,",
				"          ZipCode as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Addresses",
				"Customers, Addresses join(Customers@CustomerID == Addresses@CustomerID,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join",
				"join derive(ActiveFlag = toBoolean(\"1\"),",
				"          ZipCode = toString(ZipCode),",
				"          PhoneNumber = toString(PhoneNumber)) ~> derivedColumn",
				"derivedColumn sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          CustomerSK as integer,",
				"          CustomerID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          PhoneNumber as string,",
				"          RecordStartDate as date,",
				"          RecordEndDate as date,",
				"          ActiveFlag as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          CustomerID = Customers@CustomerID,",
				"          LastName,",
				"          FirstName,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          PhoneNumber,",
				"          RecordStartDate = Customers@CreatedDate,",
				"          ActiveFlag",
				"     )) ~> sink1"
			]
		}
	}
}