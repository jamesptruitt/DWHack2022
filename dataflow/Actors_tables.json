{
	"name": "Actors_tables",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Actors",
						"type": "DatasetReference"
					},
					"name": "sourceActors"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTableActors",
						"type": "DatasetReference"
					},
					"name": "sinkActors"
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTableDimActors",
						"type": "DatasetReference"
					},
					"name": "sinkMovieActors"
				}
			],
			"transformations": [
				{
					"name": "selectActors"
				},
				{
					"name": "selectMovieActors"
				},
				{
					"name": "filter"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ActorID as string,",
				"          ActorName as string,",
				"          Gender as string,",
				"          MovieID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> sourceActors",
				"sourceActors select(mapColumn(",
				"          ActorID,",
				"          ActorName,",
				"          Gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectActors",
				"sourceActors select(mapColumn(",
				"          ActorID,",
				"          MovieID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMovieActors",
				"selectMovieActors filter(!isNull(MovieID)) ~> filter",
				"selectActors aggregate(groupBy(ActorID,",
				"          ActorName,",
				"          Gender),",
				"     count = count()) ~> aggregate1",
				"filter aggregate(groupBy(ActorID,",
				"          MovieID),",
				"     count = count()) ~> aggregate2",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ActorSK as integer,",
				"          ActorID as string,",
				"          ActorName as string,",
				"          ActorGender as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ActorID,",
				"          ActorName,",
				"          ActorGender = Gender",
				"     )) ~> sinkActors",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MovieID as string,",
				"          ActorID as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MovieID,",
				"          ActorID",
				"     )) ~> sinkMovieActors"
			]
		}
	}
}