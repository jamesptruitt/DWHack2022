{
	"name": "Actors2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SouthridgeMovies",
						"type": "DatasetReference"
					},
					"name": "sourceSR"
				},
				{
					"dataset": {
						"referenceName": "VanArsdellActors",
						"type": "DatasetReference"
					},
					"name": "sourceVAActors"
				},
				{
					"dataset": {
						"referenceName": "VanArsdell_MovieActors",
						"type": "DatasetReference"
					},
					"name": "sourceAVMovieActors"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Actors",
						"type": "DatasetReference"
					},
					"name": "sinkActors"
				}
			],
			"transformations": [
				{
					"name": "flattenActors"
				},
				{
					"name": "selectSRActors"
				},
				{
					"name": "removeDuplicateActors"
				},
				{
					"name": "selectNames"
				},
				{
					"name": "joinActors"
				},
				{
					"name": "selectRemoveDuplicateName"
				},
				{
					"name": "AddUUID",
					"flowlet": {
						"referenceName": "AddActorUUID",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "AddGender",
					"flowlet": {
						"referenceName": "AddActorGender",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "joinMovieActors"
				},
				{
					"name": "split1"
				},
				{
					"name": "joinOnName"
				},
				{
					"name": "joinOnID"
				},
				{
					"name": "selectSchemaName"
				},
				{
					"name": "selectSchemaID"
				},
				{
					"name": "unionData"
				}
			],
			"scriptLines": [
				"source(output(",
				"          actors as (name as string)[],",
				"          availabilityDate as string,",
				"          genre as string,",
				"          rating as string,",
				"          releaseYear as integer,",
				"          runtime as integer,",
				"          streamingAvailabilityDate as string,",
				"          tier as integer,",
				"          title as string,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> sourceSR",
				"source(output(",
				"          ActorID as string,",
				"          ActorName as string,",
				"          Gender as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> sourceVAActors",
				"source(output(",
				"          MovieActorID as string,",
				"          MovieID as string,",
				"          ActorID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> sourceAVMovieActors",
				"sourceSR foldDown(unroll(actors),",
				"     mapColumn(",
				"          ActorName = actors.name,",
				"          MovieID = id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenActors",
				"flattenActors select(mapColumn(",
				"          ActorName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSRActors",
				"selectSRActors aggregate(groupBy(ActorName),",
				"     count = count()) ~> removeDuplicateActors",
				"removeDuplicateActors select(mapColumn(",
				"          ActorName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectNames",
				"sourceVAActors, selectNames join(sourceVAActors@ActorName == selectNames@ActorName,",
				"     joinType:'outer',",
				"     broadcast: 'auto')~> joinActors",
				"joinActors select(mapColumn(",
				"          ActorID,",
				"          ActorName = sourceVAActors@ActorName,",
				"          Gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRemoveDuplicateName",
				"selectRemoveDuplicateName compose(mapColumn(",
				"          ActorID,",
				"          ActorName,",
				"          Gender",
				"     ),",
				"     composition: 'AddActorUUID') ~> AddUUID@(output1)",
				"AddUUID@output1 compose(mapColumn(",
				"          ActorID,",
				"          ActorName,",
				"          Gender",
				"     ),",
				"     composition: 'AddActorGender') ~> AddGender@(output1)",
				"sourceAVMovieActors, flattenActors union(byName: true)~> joinMovieActors",
				"joinMovieActors split(!isNull(ActorName),",
				"     disjoint: false) ~> split1@(ActorNames, ActorIDs)",
				"split1@ActorNames, AddGender@output1 join(split1@ActorNames@ActorName == AddGender@ActorName,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> joinOnName",
				"split1@ActorIDs, AddGender@output1 join(MovieActorID == AddGender@ActorID,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> joinOnID",
				"joinOnName select(mapColumn(",
				"          MovieActorID,",
				"          MovieID,",
				"          ActorID = AddGender@ActorID,",
				"          ActorName = AddGender@ActorName,",
				"          Gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSchemaName",
				"joinOnID select(mapColumn(",
				"          MovieActorID,",
				"          MovieID,",
				"          ActorID = AddGender@ActorID,",
				"          ActorName = AddGender@ActorName,",
				"          Gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSchemaID",
				"selectSchemaName, selectSchemaID union(byName: true)~> unionData",
				"unionData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkActors"
			]
		}
	}
}