{
	"name": "CustomersAndAddresses",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cloudsales_customers",
						"type": "DatasetReference"
					},
					"name": "CloudSalesCustomer"
				},
				{
					"dataset": {
						"referenceName": "cloudsales_address",
						"type": "DatasetReference"
					},
					"name": "CloudSalesAddress"
				},
				{
					"dataset": {
						"referenceName": "fourthcoffee_customers",
						"type": "DatasetReference"
					},
					"name": "fourthcoffee"
				},
				{
					"dataset": {
						"referenceName": "vanarsdell_customers",
						"type": "DatasetReference"
					},
					"name": "vanarsdell"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				},
				{
					"dataset": {
						"referenceName": "Addresses",
						"type": "DatasetReference"
					},
					"name": "addresses"
				}
			],
			"transformations": [
				{
					"name": "fourthSelectCustomer"
				},
				{
					"name": "fourthSelectAddress"
				},
				{
					"name": "vanarsdellSelectCustomer"
				},
				{
					"name": "vanarsdellSelectAddress"
				},
				{
					"name": "unionCustomer"
				},
				{
					"name": "unionAddress"
				},
				{
					"name": "selectCustomer"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "selectAddress"
				},
				{
					"name": "AddUniqueID"
				},
				{
					"name": "AddAddressUniqueID"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          PhoneNumber as string,",
				"          CreatedDate as string,",
				"          UpdatedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['$Date']) ~> CloudSalesCustomer",
				"source(output(",
				"          AddressID as string,",
				"          CustomerID as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          CreatedDate as string,",
				"          UpdatedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['$Date']) ~> CloudSalesAddress",
				"source(output(",
				"          CustomerID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          PhoneNumber as string,",
				"          CreatedDate as string,",
				"          UpdatedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['$Date']) ~> fourthcoffee",
				"source(output(",
				"          CustomerID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          PhoneNumber as string,",
				"          CreatedDate as string,",
				"          UpdatedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['$Date']) ~> vanarsdell",
				"derivedColumn3 select(mapColumn(",
				"          CustomerID,",
				"          LastName,",
				"          FirstName,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          PhoneNumber,",
				"          CreatedDate,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> fourthSelectCustomer",
				"derivedColumn3 select(mapColumn(",
				"          CustomerID,",
				"          LastName,",
				"          FirstName,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          PhoneNumber,",
				"          CreatedDate,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> fourthSelectAddress",
				"derivedColumn4 select(mapColumn(",
				"          CustomerID,",
				"          LastName,",
				"          FirstName,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          PhoneNumber,",
				"          CreatedDate,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> vanarsdellSelectCustomer",
				"derivedColumn4 select(mapColumn(",
				"          CustomerID,",
				"          LastName,",
				"          FirstName,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          PhoneNumber,",
				"          CreatedDate,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> vanarsdellSelectAddress",
				"derivedColumn1, fourthSelectCustomer, vanarsdellSelectCustomer union(byName: true)~> unionCustomer",
				"derivedColumn2, fourthSelectAddress, vanarsdellSelectAddress union(byName: true)~> unionAddress",
				"unionCustomer select(mapColumn(",
				"          CustomerID,",
				"          LastName,",
				"          FirstName,",
				"          PhoneNumber,",
				"          CreatedDate,",
				"          UpdatedDate,",
				"          SourceID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCustomer",
				"CloudSalesCustomer derive(SourceID = 1) ~> derivedColumn1",
				"CloudSalesAddress derive(SourceID = 1) ~> derivedColumn2",
				"fourthcoffee derive(SourceID = 2) ~> derivedColumn3",
				"vanarsdell derive(SourceID = 3) ~> derivedColumn4",
				"unionAddress select(mapColumn(",
				"          AddressID,",
				"          CustomerID,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          CreatedDate,",
				"          UpdatedDate,",
				"          SourceID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectAddress",
				"selectCustomer derive(UniqueID = concat(toString(SourceID), \"-\", CustomerID),",
				"          CreatedDate = toDate(CreatedDate, \"yyyy-MM-dd\"),",
				"          UpdatedDate = toDate(UpdatedDate, \"yyyy-MM-dd\")) ~> AddUniqueID",
				"selectAddress derive(UniqueID = concat(toString(SourceID), \"-\", CustomerID, \"-\", AddressID),",
				"          CreatedDate = toDate(CreatedDate, \"yyyy-MM-dd\"),",
				"          UpdatedDate = toDate(UpdatedDate, \"yyyy-MM-dd\")) ~> AddAddressUniqueID",
				"AddUniqueID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> customers",
				"AddAddressUniqueID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> addresses"
			]
		}
	}
}